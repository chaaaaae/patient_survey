{"ast":null,"code":"// Firestore에서 필요한 함수 가져오기\nimport{collection,addDoc,doc,setDoc,getDoc}from'firebase/firestore';import{db}from'../firebaseConfig';// Firestore 인스턴스 가져오기\n// 사용자 데이터를 Firestore에 저장하는 함수\nconst saveUserData=async data=>{try{const docRef=doc(db,'users',data.name);// 사용자의 이름을 문서 ID로 사용\nawait setDoc(docRef,data);// 데이터 저장\nconsole.log(\"Document written with ID: \",docRef.id);}catch(e){console.error(\"Error adding document: \",e);}};export{saveUserData};// 사용자별 answers를 저장하는 함수\nexport const saveUserAnswers=async(userName,answers)=>{try{const userRef=doc(db,'users',userName);// Firestore에서 사용자 문서 참조\nconst snap=await getDoc(userRef);const existing=snap.exists()&&snap.data().answers?snap.data().answers:{};const merged={...existing,...answers};await setDoc(userRef,{answers:merged},{merge:true});console.log(`Answers saved for ${userName}`,merged);}catch(error){console.error('Error saving answers:',error);}};// 사용자별 answers를 불러오는 함수\nexport const getUserAnswers=async userName=>{try{const userRef=doc(db,'users',userName);const snap=await getDoc(userRef);return snap.exists()?snap.data().answers:{};}catch(e){console.error(\"Error getting user answers: \",e);throw e;}};// 사용자의 설문 결과 점수를 저장하는 함수\nexport const saveSurveyScores=async(userName,scores)=>{try{const userRef=doc(db,'users',userName);const timestamp=new Date().toISOString();// 저장할 데이터 구조\nconst scoreData={timestamp,stdScores:scores.stdScores,meanScores:scores.meanScores,riskGroups:scores.riskGroups,overallMean:scores.overallMean,overallRiskGroup:scores.overallRiskGroup,overallFeedback:scores.overallFeedback,additionalFeedback:scores.additionalFeedback};// 기존 데이터 가져오기\nconst snap=await getDoc(userRef);const existingData=snap.exists()?snap.data():{};// surveyResults 배열이 없으면 생성\nconst surveyResults=existingData.surveyResults||[];// 새로운 결과 추가\nsurveyResults.push(scoreData);// Firestore에 저장 (lastSurveyResult는 저장하지 않음)\nawait setDoc(userRef,{...existingData,surveyResults,// 히스토리만 저장\nlastSurveyCompletedAt:timestamp// 마지막 설문 완료 시간\n},{merge:true});console.log(`Survey scores, overall feedback, and completion time saved for ${userName}`,scoreData);return true;}catch(error){console.error('Error saving survey scores:',error);throw error;}};","map":{"version":3,"names":["collection","addDoc","doc","setDoc","getDoc","db","saveUserData","data","docRef","name","console","log","id","e","error","saveUserAnswers","userName","answers","userRef","snap","existing","exists","merged","merge","getUserAnswers","saveSurveyScores","scores","timestamp","Date","toISOString","scoreData","stdScores","meanScores","riskGroups","overallMean","overallRiskGroup","overallFeedback","additionalFeedback","existingData","surveyResults","push","lastSurveyCompletedAt"],"sources":["C:/Users/20201/OneDrive/바탕 화면/patient_survey/web1/src/utils/firebaseUtils.js"],"sourcesContent":["// Firestore에서 필요한 함수 가져오기\nimport { collection, addDoc, doc, setDoc, getDoc } from 'firebase/firestore';\nimport { db } from '../firebaseConfig'; // Firestore 인스턴스 가져오기\n\n// 사용자 데이터를 Firestore에 저장하는 함수\nconst saveUserData = async (data) => {\n  try {\n    const docRef = doc(db, 'users', data.name); // 사용자의 이름을 문서 ID로 사용\n    await setDoc(docRef, data); // 데이터 저장\n    console.log(\"Document written with ID: \", docRef.id);\n  } catch (e) {\n    console.error(\"Error adding document: \", e);\n  }\n};\n\nexport { saveUserData };\n\n// 사용자별 answers를 저장하는 함수\nexport const saveUserAnswers = async (userName, answers) => {\n  try {\n    const userRef = doc(db, 'users', userName); // Firestore에서 사용자 문서 참조\n    const snap = await getDoc(userRef);\n    const existing = snap.exists() && snap.data().answers ? snap.data().answers : {};\n    const merged = { ...existing, ...answers };\n    await setDoc(userRef, { answers: merged }, { merge: true });\n    console.log(`Answers saved for ${userName}`, merged);\n  } catch (error) {\n    console.error('Error saving answers:', error);\n  }\n};\n\n// 사용자별 answers를 불러오는 함수\nexport const getUserAnswers = async (userName) => {\n  try {\n    const userRef = doc(db, 'users', userName);\n    const snap = await getDoc(userRef);\n    return snap.exists() ? snap.data().answers : {};\n  } catch (e) {\n    console.error(\"Error getting user answers: \", e);\n    throw e;\n  }\n};\n\n// 사용자의 설문 결과 점수를 저장하는 함수\nexport const saveSurveyScores = async (userName, scores) => {\n  try {\n    const userRef = doc(db, 'users', userName);\n    const timestamp = new Date().toISOString();\n    \n    // 저장할 데이터 구조\n    const scoreData = {\n      timestamp,\n      stdScores: scores.stdScores,\n      meanScores: scores.meanScores,\n      riskGroups: scores.riskGroups,\n      overallMean: scores.overallMean,\n      overallRiskGroup: scores.overallRiskGroup,\n      overallFeedback: scores.overallFeedback,\n      additionalFeedback: scores.additionalFeedback\n    };\n\n    // 기존 데이터 가져오기\n    const snap = await getDoc(userRef);\n    const existingData = snap.exists() ? snap.data() : {};\n    \n    // surveyResults 배열이 없으면 생성\n    const surveyResults = existingData.surveyResults || [];\n    \n    // 새로운 결과 추가\n    surveyResults.push(scoreData);\n    \n    // Firestore에 저장 (lastSurveyResult는 저장하지 않음)\n    await setDoc(userRef, { \n      ...existingData,\n      surveyResults, // 히스토리만 저장\n      lastSurveyCompletedAt: timestamp // 마지막 설문 완료 시간\n    }, { merge: true });\n\n    console.log(`Survey scores, overall feedback, and completion time saved for ${userName}`, scoreData);\n    return true;\n  } catch (error) {\n    console.error('Error saving survey scores:', error);\n    throw error;\n  }\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}