{"ast":null,"code":"// src/contexts/AuthContext.js\nimport React,{createContext,useState,useEffect,useContext}from'react';import{onAuthStateChanged,signInWithEmailAndPassword,sendPasswordResetEmail,signOut as firebaseSignOut,updateProfile}from'firebase/auth';import{doc,getDoc,setDoc}from'firebase/firestore';import{auth,db}from'../firebase';// 인증 컨텍스트 생성\nimport{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext();// 컨텍스트 사용을 위한 훅\nexport function useAuth(){return useContext(AuthContext);}// 인증 제공자 컴포넌트\nexport function AuthProvider(_ref){let{children}=_ref;const[currentUser,setCurrentUser]=useState(null);const[socialWorkerData,setSocialWorkerData]=useState(null);const[loading,setLoading]=useState(true);// 이메일/비밀번호로 로그인\nasync function login(email,password){try{return await signInWithEmailAndPassword(auth,email,password);}catch(error){throw error;}}// 비밀번호 재설정 이메일 전송\nasync function resetPassword(email){try{return await sendPasswordResetEmail(auth,email);}catch(error){throw error;}}// 로그아웃\nasync function signOut(){return firebaseSignOut(auth);}// 사회복지사 정보 가져오기\nasync function fetchSocialWorkerData(uid){try{const docRef=doc(db,\"socialWorkers\",uid);const docSnap=await getDoc(docRef);if(docSnap.exists()){const data=docSnap.data();setSocialWorkerData(data);return data;}else{setSocialWorkerData(null);throw new Error(\"사회복지사 정보를 찾을 수 없습니다.\");}}catch(error){console.error(\"사회복지사 정보 가져오기 오류:\",error);throw error;}}// 사회복지사 정보 업데이트\nasync function updateSocialWorkerData(uid,data){try{await setDoc(doc(db,\"socialWorkers\",uid),{...data,updatedAt:new Date().toISOString()},{merge:true});// 로컬 상태 업데이트\nsetSocialWorkerData(prevData=>({...prevData,...data}));}catch(error){console.error(\"사회복지사 정보 업데이트 오류:\",error);throw error;}}// 인증 상태 변경 감지\nuseEffect(()=>{const unsubscribe=onAuthStateChanged(auth,async user=>{setCurrentUser(user);if(user){try{await fetchSocialWorkerData(user.uid);}catch(error){console.error(\"사용자 데이터 로드 실패:\",error);}}else{setSocialWorkerData(null);}setLoading(false);});// 정리 함수\nreturn unsubscribe;},[]);// 컨텍스트 값\nconst value={currentUser,socialWorkerData,login,resetPassword,signOut,fetchSocialWorkerData,updateSocialWorkerData};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:!loading&&children});}","map":{"version":3,"names":["React","createContext","useState","useEffect","useContext","onAuthStateChanged","signInWithEmailAndPassword","sendPasswordResetEmail","signOut","firebaseSignOut","updateProfile","doc","getDoc","setDoc","auth","db","jsx","_jsx","AuthContext","useAuth","AuthProvider","_ref","children","currentUser","setCurrentUser","socialWorkerData","setSocialWorkerData","loading","setLoading","login","email","password","error","resetPassword","fetchSocialWorkerData","uid","docRef","docSnap","exists","data","Error","console","updateSocialWorkerData","updatedAt","Date","toISOString","merge","prevData","unsubscribe","user","value","Provider"],"sources":["C:/Users/20201/OneDrive/바탕 화면/patient_survey/web2/src/contexts/AuthContext.js"],"sourcesContent":["// src/contexts/AuthContext.js\r\nimport React, { createContext, useState, useEffect, useContext } from 'react';\r\nimport { \r\n  onAuthStateChanged, \r\n  signInWithEmailAndPassword,\r\n  sendPasswordResetEmail,\r\n  signOut as firebaseSignOut,\r\n  updateProfile\r\n} from 'firebase/auth';\r\nimport { doc, getDoc, setDoc } from 'firebase/firestore';\r\nimport { auth, db } from '../firebase';\r\n\r\n// 인증 컨텍스트 생성\r\nconst AuthContext = createContext();\r\n\r\n// 컨텍스트 사용을 위한 훅\r\nexport function useAuth() {\r\n  return useContext(AuthContext);\r\n}\r\n\r\n// 인증 제공자 컴포넌트\r\nexport function AuthProvider({ children }) {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n  const [socialWorkerData, setSocialWorkerData] = useState(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // 이메일/비밀번호로 로그인\r\n  async function login(email, password) {\r\n    try {\r\n      return await signInWithEmailAndPassword(auth, email, password);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 비밀번호 재설정 이메일 전송\r\n  async function resetPassword(email) {\r\n    try {\r\n      return await sendPasswordResetEmail(auth, email);\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 로그아웃\r\n  async function signOut() {\r\n    return firebaseSignOut(auth);\r\n  }\r\n\r\n  // 사회복지사 정보 가져오기\r\n  async function fetchSocialWorkerData(uid) {\r\n    try {\r\n      const docRef = doc(db, \"socialWorkers\", uid);\r\n      const docSnap = await getDoc(docRef);\r\n      \r\n      if (docSnap.exists()) {\r\n        const data = docSnap.data();\r\n        setSocialWorkerData(data);\r\n        return data;\r\n      } else {\r\n        setSocialWorkerData(null);\r\n        throw new Error(\"사회복지사 정보를 찾을 수 없습니다.\");\r\n      }\r\n    } catch (error) {\r\n      console.error(\"사회복지사 정보 가져오기 오류:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 사회복지사 정보 업데이트\r\n  async function updateSocialWorkerData(uid, data) {\r\n    try {\r\n      await setDoc(doc(db, \"socialWorkers\", uid), {\r\n        ...data,\r\n        updatedAt: new Date().toISOString()\r\n      }, { merge: true });\r\n      \r\n      // 로컬 상태 업데이트\r\n      setSocialWorkerData(prevData => ({...prevData, ...data}));\r\n    } catch (error) {\r\n      console.error(\"사회복지사 정보 업데이트 오류:\", error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 인증 상태 변경 감지\r\n  useEffect(() => {\r\n    const unsubscribe = onAuthStateChanged(auth, async (user) => {\r\n      setCurrentUser(user);\r\n      if (user) {\r\n        try {\r\n          await fetchSocialWorkerData(user.uid);\r\n        } catch (error) {\r\n          console.error(\"사용자 데이터 로드 실패:\", error);\r\n        }\r\n      } else {\r\n        setSocialWorkerData(null);\r\n      }\r\n      setLoading(false);\r\n    });\r\n\r\n    // 정리 함수\r\n    return unsubscribe;\r\n  }, []);\r\n\r\n  // 컨텍스트 값\r\n  const value = {\r\n    currentUser,\r\n    socialWorkerData,\r\n    login,\r\n    resetPassword,\r\n    signOut,\r\n    fetchSocialWorkerData,\r\n    updateSocialWorkerData\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {!loading && children}\r\n    </AuthContext.Provider>\r\n  );\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}